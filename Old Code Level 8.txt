/*
  // 1st Part of the Way
  for(let i = 2; i < (gameMap.length - 1); ++i)
  {
    route.push("down");
  }

  // 2nd Part of the Way
  for(let j = 2; j < (gameMap[gameMap.length - 1].length - 1); ++j)
  {
    route.push("right");
  }

  // 3rd Part of the Way
  let flameFields = 0;
  let lengthOfaColumn = 0;
  let lengthOfSubarray = 0;

  for(let i = 1; i < gameMap.length; ++i)
  {
    lengthOfaColumn = gameMap.length;
    lengthOfSubarray = gameMap[0].length;
    if(gameMap[i][lengthOfSubarray-2] === 13)
    {
      ++flameFields;
    }
  }

  let firstUp = lengthOfaColumn - (flameFields+1);

  for(let i = 2; i <= firstUp; ++i)
  {
    route.push("up");
  }
*/
  // 4th Part of the Way
  // let startPos = flameFields; 
  // for(let i = lengthOfSubarray - 2; i > 0; --i)
  // {
  //   let free = 11;
  //   let fire = 13;
  //   let fieldAboveDiagonalLeft = gameMap[startPos - 1][i - 1]
  //   let startField = gameMap[startPos][i + 1];
  //   let aboveLastField =  gameMap[startPos - 1][i]
  //   let fieldWhereWeAre = gameMap[startPos][i];
  //   let leftOfLastField = gameMap[startPos][i - 1];
  //   let nextStep;
  //     // if(fieldWhereWeAre === free && fieldLeftOfMe === free)
  //     // {
  //     //   nextStep = "left";
  //     //   //console.log(i + ":" + "left");
  //     // }
  //     // else if(fieldWhereWeAre === free && fieldAboveMe === free)
  //     // {
  //     //   nextStep = "up";
  //     //   //console.log(i + ":" + "up" + "->" + fieldLeftOfMe + "-" + fieldAboveMe + "-" + fieldWhereWeAre);
  //     // }
  //     // else if(fieldAboveMe === free && fieldAboveDiagonalLeft === free)
  //     // {
  //     //   nextStep = "left";
  //     //   //console.log(i + ":" + "left");
  //     // }
    
  //     // if (fieldAboveMe === free && fieldWhereWeAre === free)
  //     // {
  //     //   nextStep = "down";
  //     //   //console.log(i + ":" + "down" + "->" + fieldAboveDiagonalLeft + "-" + fieldAboveMe + "-" + fieldWhereWeAre);
  //     // }
  //     // route.push(nextStep);
  //     // console.log("X2", fieldAboveDiagonalLeft, fieldAboveMe, nextStep);
  //     // console.log("X1", fieldLeftOfMe, fieldWhereWeAre);

  //     if(leftOfLastField === free && lastMove !== "right")
  //     {
  //       lastMove = "left";
  //       route.push("left");
  //     }
  //     // else if(elementRightOfPrince === 11 && lastMove !== "left")
  //     // {
  //     //   lastMove = "right";
  //     //   hasMovedToTile('right');
  //     // }
  //     else if(aboveLastField === free && lastMove !== "down")
  //     {
  //       lastMove = "up";
  //       route.push("up");
  //     }
  //     else if(fieldWhereWeAre === free && lastMove !== "up")
  //     {
  //       lastMove = "down";
  //       route.push("down");
  //     }
  // }
/*
 10| 13  11  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  11  11  11  11  13  11  11  11  13  13  13 
 11| 13  11  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  11  11  13  11  11  11  13  11  11  11  13 
*/
  // console.log(gameMap[zigzagStart]);
  // console.log(gameMap[zigzagStart - 1]);
  // console.log(route);

  // 5th Final Part of the Way


  /*
    array element 1 -> array[X elemente] aller positionen der ersten zeile
    array element 2 -> array[X elemente] aller positionen der zweiten zeile
    etc...
  */

    // New Approach
    /*
        Make Map a new as variable
        Search for index of 10
        define variables for the positions left, right, up, down of indexOf(10)
        double for loop for main array, and array on [i] of main array
        update map once moved, field moved to becomes 10, old field becomes 13 (prevents us from moving backwards)
        push into output array
        back to the start -> wrap it in a do while loop => while !playerMeetsPrinces boolean for if 10 is with princes
        return ouput array
    */